%header%

GRAMMARTYPE = "LL"
AUTHOR 		= "Maciej && Mateusz"
VERSION 	= "1.0"

%tokens%

IDENT			= <<[a-zA-Z]>>
DIGIT			= <<[0-9]>>
WHITESPACE		= <<[ \t\n\r]+>> %ignore%

DOLLAR			= "$"

PLUS			= "+"
MINUS			= "-"
SLASH			= "/"
ASTERISK		= "*"
NEQUAL			= "!="
NEQUAL2			= "\neq"
EQUAL			= "="
EXCLAMATION		= "!"
LT				= "<"
LET				= "<="
LET2			= "\leq"
GT				= ">"
GET				= ">="
GET2			= "\geq"
BAR_SYM			= "|"
APOSTROPHE		= "'" // pochodna
UNDERSCORE		= "_" // indeks dolny
CARET			= "^" // indeks górny (potêga)
COMMA			= ","
COLON			= ":"
DOT				= "."
BACKSLASH		= "\"

L_PARENTHESIS	= "("
R_PARENTHESIS	= ")"
L_BRACKET		= "["
R_BRACKET		= "]"
L_CURLY_BRACKET = "{"
R_CURLY_BRACKET	= "}"

TO				= "\to"
MATHRM			= "\mathrm"
INFTY			= "\infty"
FRAC			= "\frac"
SQRT			= "\sqrt"
SUM				= "\sum"
INTEGRAL		= "\int"
PM				= "\pm"
MP				= "\mp"
BMOD			= "\bmod"
LDOTS			= "\ldots"

// Greckie litery
ALPHA			= "\alpha"
BETA			= "\beta"
GAMMA			= "\gamma"
DELTA 			= "\delta"
EPSILON 		= "\epsilon"
VAREPSILON 		= "\varepsilon"
ZETA 			= "\zeta"
ETA 			= "\eta"
THETA 			= "\theta"
VARTHETA 		= "\vartheta"
KAPPA 			= "\kappa"
LAMBDA 			= "\lambda"
MU 				= "\mu"
NU 				= "\nu"
XI 				= "\xi"
PI 				= "\pi"
VARPI 			= "\varpi"
RHO 			= "\rho"
VARRHO 			= "\varrho"
SIGMA 			= "\sigma"
VARSIGMA 		= "\varsigma"
TAU 			= "\tau"
UPSILON 		= "\upsilon"
PHI 			= "\phi"
VARPHI 			= "\varphi"
CHI 			= "\chi"
PSI 			= "\psi"
OMEGA			= "\omega"

BGAMMA			= "\Gamma"
BDELTA			= "\Delta"
BTHETA			= "\Theta"
BLAMBDA			= "\Lambda"
BXI				= "\Xi"
BPI				= "\Pi"
BSIGMA			= "\Sigma"
BUPSILON		= "\Upsilon"
BPHI			= "\Phi"
BPSI			= "\Psi"
BOMEGA			= "\Omega"

// Log-like symbols
ARCCOS 			= "\arccos"
ARCSIN 			= "\arcsin"
ARCTAN 			= "\arctan"
ARCCOT			= "\arccot"
ARG 			= "\arg"
COS 			= "\cos"
COSH 			= "\cosh"
COT 			= "\cot"
COTH 			= "\coth"
CSC 			= "\csc"
EXP 			= "\exp"
LG 				= "\lg"
LIM 			= "\lim"
LN 				= "\ln"
LOG 			= "\log"
SEC 			= "\sec"
SIN 			= "\sin"
SINH 			= "\sinh"
SUP 			= "\sup"
TAN 			= "\tan"
TANH			= "\tanh"

PT				= "pt"
DOCUMENTCLASS 	= "\documentclass"
USEPACKAGE		= "\usepackage"
BEGINDOC		= "\begin{document}"
ENDDOC			= "\end{document}"
NEWLINE			= "\\"

%productions%
Document = Preamble Body;

Preamble = DocumentclassDeclaration PackageDeclaration*;

DocumentclassDeclaration = DOCUMENTCLASS DocumentOptions? Class;

Class = L_CURLY_BRACKET Classname R_CURLY_BRACKET ;
Classname = Word;

DocumentOptions = L_BRACKET Fontsize (COMMA Papertype)? R_BRACKET;

Papertype = Word;

Fontsize = Number PT;


PackageDeclaration = USEPACKAGE PackageOptions? Package;

PackageOptions = L_BRACKET WordEQ (COMMA WordEQ)* R_BRACKET;

Package = L_CURLY_BRACKET WordEQ (COMMA WordEQ)* R_CURLY_BRACKET;


Word = IDENT (IDENT|DIGIT)*;

WordEQ = Word (EQUAL Number Word?)?;

Body = BEGINDOC (Math|Text|NEWLINE)+ ENDDOC;

Text = Word|Number|COLON;


Math = DOLLAR Statement* DOLLAR ;


Statement = Expression {Operator Expression} ;

Operator = EQUAL | NEQUAL | NEQUAL2| LT | GT | LET | LET2 | GET | GET2 ;

Expression = Plus_or_minus? Component {Plus_or_minus Component};

Plus_or_minus = PLUS | MINUS | PM | MP ;

Component = Factor_ext [Unary_Operator] {[Binary_Operator] Factor_ext [Unary_Operator]} ;

Factor_ext = Function | Factor [Subscript][Superscript] ;

Binary_Operator = SLASH | ASTERISK | TO | BMOD | COMMA ;

Unary_Operator = EXCLAMATION | APOSTROPHE ;


Factor = IDENT | Number | L_PARENTHESIS Expression R_PARENTHESIS | L_BRACKET Expression R_BRACKET | Special_symbol ;

Number = DIGIT+ [DOT DIGIT+] ;


Special_symbol = LDOTS | INFTY | Greek ;


Greek =  ALPHA | BETA | GAMMA | DELTA | EPSILON | VAREPSILON | ZETA | ETA | THETA | VARTHETA | KAPPA | LAMBDA | MU | NU | XI | PI | VARPI | RHO | VARRHO | SIGMA | VARSIGMA | TAU | UPSILON | PHI | VARPHI | CHI | PSI | OMEGA | BGAMMA | BDELTA | BTHETA | BLAMBDA | BXI | BPI | BSIGMA | BUPSILON | BPHI | BPSI | BOMEGA ;


Function = FRAC Parameter Parameter | SQRT [L_BRACKET Expression R_BRACKET] Parameter | EXP Expression | Sum_expression | Int_expression | Log_expression | Trig_expression | Lim_expression ;


Log_expression = Log_symbol [Subscript][Superscript] Expression | LN [Superscript] Expression ;

Trig_expression = Trig_symbol [Subscript][Superscript] Component ;

Lim_expression = Lim_symbol [Subscript] Expression ;


Log_symbol = LOG | LG ;

Trig_symbol = SIN | COS | TAN | COT | ARCSIN | ARCCOS | ARCTAN | ARCCOT | SINH | COSH | TANH | COTH | SEC | CSC ;

Lim_symbol = LIM ;

Sum_expression = SUM [Stmt_subscript][Superscript] Expression ;

Int_expression = INTEGRAL [Subscript][Superscript] Expression BACKSLASH COMMA MATHRM L_CURLY_BRACKET IDENT R_CURLY_BRACKET IDENT ;


Parameter = IDENT | DIGIT | Special_symbol | L_CURLY_BRACKET Expression R_CURLY_BRACKET ;

Subscript = UNDERSCORE Parameter ;

Superscript = CARET Parameter ;


Stmt_parameter = IDENT | DIGIT | Special_symbol | L_CURLY_BRACKET Statement R_CURLY_BRACKET ;

Stmt_subscript = UNDERSCORE Stmt_parameter ;

Stmt_superscript = CARET Stmt_parameter ;

