%header%
GRAMMARTYPE = "LL"
AUTHOR 		= "Maciej"
VERSION 	= "1.0"

%tokens%
IDENT			= <<[a-zA-Z]>>
DIGIT			= <<[0-9]>>
WHITESPACE		= <<[ \t\n\r]+>> %ignore%	
LINE_COMMENT	= <<%.*\n>> %ignore%
	
// Special commands
S_DOLLAR 		= "\$"  // start math environment
S_PERCENT 		= "\%"  // comment
S_UNDERSCORE 	= "\_"
S_LBRACE		= "\{"
S_RBRACE		= "\}"
S_AMPERSAND 	= "\&"
S_HASH			= "\#"
S_BACKSLASH		= "\\"  // new line
S_BACKSLASH_A	= "\\*" // new line without pagebreak

// Special characters
TILDE 			= "~"
BACKTICK 		= "`"
EXCLAMATION		= "!"
AT 				= "@"
HASH 			= "#"
DOLLAR 			= "$"
PERCENT			= "%"
CARET			= "^"	// superscript (power)
AMPERSAND		= "&"
ASTERISK		= "*"
UNDERSCORE		= "_"	// subscript
MINUS			= "-"
PLUS			= "+"
EQUAL			= "="
BACKSLASH		= "\"
VERT_BAR		= "|"
COLON			= ":"
SEMICOLON		= ";"
APOSTROPHE		= "'"	// derivative
QUOTATION		= <<">>
COMMA			= ","
DOT				= "."
SLASH			= "/"
QUESTION		= "?"

// Delimeters
L_PARENTHESIS	= "("
R_PARENTHESIS	= ")"
L_BRACKET		= "["
R_BRACKET		= "]"
L_CURLY_BRACKET = "{"
R_CURLY_BRACKET	= "}"
L_FLOOR			= "\lfloor"
R_FLOOR			= "\rfloor"
L_CEIL			= "\lceil"
R_CEIL			= "\rceil"
L_ANGLE			= "\langle"
R_ANGLE			= "\rangle"

// Relations
NEQUAL			= "!="
NEQUAL2			= "\neq"
LT				= "<"
LET				= "\leq"
GT				= ">"
GET				= "\geq"
PREC			= "\prec" 		
SUCC			= "\succ"		
PRECEQ			= "\preceq"	
SUCCEQ			= "\succeq"
LL				= "\ll"
GG				= "\gg"
SUBSET			= "\subset"
SUPSET			= "\supset"
SUBSETEQ		= "\subseteq"
SUPSETEQ		= "\supseteq"
NSUBSETEQ		= "\nsubseteq"
NSUPSETEQ		= "\nsupseteq"
IN				= "\in"
NI				= "\ni"
NOTIN			= "\notin"
EQUIV			= "\equiv"
SIM				= "\sim"
SIMEQ			= "\simeq"
APPROX			= "\approx"

// Additional operators
FORALL			= "\forall"
EXISTS			= "\exists"
NEXISTS			= "\nexists"
TO				= "\to"
GETS			= "\gets"
BMOD			= "\bmod"
PM				= "\pm"
MP				= "\mp"
DIV				= "\div"
AST				= "\ast"
TIMES			= "\times"
LEFTARROW		= "\leftarrow"
RIGHTARROW		= "\rightarrow"
CDOT			= "\cdot"
PRIME			= "\prime" 

// Additional identifiers
LDOTS			= "\ldots"
INFTY			= "\infty"
CDOTS			= "\cdots" 
EMPTYSET		= "\emptyset"
VARNOTHING		= "\varnothing"

// Functions
FRAC			= "\frac"
SQRT			= "\sqrt"
SUM				= "\sum"
INTEGRAL		= "\int"
PROD			= "\prod"
OINTEGRAL		= "\oint"
PARTIAL			= "\partial"

// Misc
MATHRM			= "\mathrm"
RE				= "\Re"
IM				= "\Im"

// Log-like symbols
ARCCOS 			= "\arccos"
ARCSIN 			= "\arcsin"
ARCTAN 			= "\arctan"
ARCCOT			= "\arccot"
ARG 			= "\arg"
COS 			= "\cos"
COSH 			= "\cosh"
COT 			= "\cot"
COTH 			= "\coth"
CSC 			= "\csc"
EXP 			= "\exp"
LG 				= "\lg"
LIM 			= "\lim"
LN 				= "\ln"
LOG 			= "\log"
SEC 			= "\sec"
SIN 			= "\sin"
SINH 			= "\sinh"
SUP 			= "\sup"
TAN 			= "\tan"
TANH			= "\tanh"
INF				= "\inf"

// Greek letters
ALPHA			= "\alpha"
BETA			= "\beta"
GAMMA			= "\gamma"
DELTA 			= "\delta"
EPSILON 		= "\epsilon"
VAREPSILON 		= "\varepsilon"
ZETA 			= "\zeta"
ETA 			= "\eta"
THETA 			= "\theta"
VARTHETA 		= "\vartheta"
KAPPA 			= "\kappa"
LAMBDA 			= "\lambda"
MU 				= "\mu"
NU 				= "\nu"
XI 				= "\xi"
PI 				= "\pi"
VARPI 			= "\varpi"
RHO 			= "\rho"
VARRHO 			= "\varrho"
SIGMA 			= "\sigma"
VARSIGMA 		= "\varsigma"
TAU 			= "\tau"
UPSILON 		= "\upsilon"
PHI 			= "\phi"
VARPHI 			= "\varphi"
CHI 			= "\chi"
PSI 			= "\psi"
OMEGA			= "\omega"

BGAMMA			= "\Gamma"
BDELTA			= "\Delta"
BTHETA			= "\Theta"
BLAMBDA			= "\Lambda"
BXI				= "\Xi"
BPI				= "\Pi"
BSIGMA			= "\Sigma"
BUPSILON		= "\Upsilon"
BPHI			= "\Phi"
BPSI			= "\Psi"
BOMEGA			= "\Omega"



// Preamble tokens
DOCUMENTCLASS 	= "\documentclass"
USEPACKAGE 		= "\usepackage"
BEGIN_ENV		= "\begin"
END_ENV			= "\end"
BEGIN_DOCUMENT 	= "\begin{document}"
END_DOCUMENT 	= "\end{document}"

DOC_OPT_FLEQN 			= "fleqn"
DOC_OPT_LEQNO 			= "leqno"
DOC_OPT_DRAFT 			= "draft"
DOC_OPT_LANDSCAPE 		= "landscape"
DOC_OPT_FONT_10			= "10pt"
DOC_OPT_FONT_11			= "11pt"
DOC_OPT_FONT_12			= "12pt"
DOC_OPT_PAPER_LETTER 	= "letterpaper"
DOC_OPT_PAPER_A4		= "a4paper"
DOC_OPT_PAPER_A5		= "a5paper"
DOC_OPT_PAPER_B5		= "b5paper"
DOC_OPT_PAPER_EXECUTIVE	= "executivepaper"
DOC_OPT_PAPER_LEGAL		= "legalpaper"
DOC_OPT_COLUMN_ONE		= "onecolumn"
DOC_OPT_COLUMN_TWO		= "twocolumn"
DOC_OPT_PAGE_TITLE		= "titlepage"
DOC_OPT_PAGE_NOTITLE	= "notitlepage"
DOC_OPT_SIDE_ONE		= "oneside"
DOC_OPT_SIDE_TWO		= "twoside"
DOC_OPT_OPEN_ANY		= "openright"
DOC_OPT_OPEN_RIGHT		= "openright"

DOC_CLASS_ARTICLE		= "article"
DOC_CLASS_IEEE			= "IEEEtran"
DOC_CLASS_PROC			= "proc"
DOC_CLASS_MINIMAL		= "minimal"
DOC_CLASS_REPORT		= "report"
DOC_CLASS_BOOK			= "book"
DOC_CLASS_SLIDES		= "slides"
DOC_CLASS_MEMOIR		= "memoir"
DOC_CLASS_LETTER		= "letter"
DOC_CLASS_BEAMER		= "beamer"

// Math environment tokens
MATH_BEGIN			= "\begin{math}"
MATH_END			= "\end{math}"
DISPLAYMATH_BEGIN	= "\begin{displaymath}"
DISPLAYMATH_END		= "\end{displaymath}"
EQUATION_BEGIN		= "\begin{equation}"
EQUATION_END		= "\end{equation}"
EQUATION_A_BEGIN	= "\begin{equation*}"
S_LPARENTHESIS		= "\("
S_RPARENTHESIS		= "\)"
S_LBRACKET			= "\["
S_RBRACKET			= "\]"

//ANY 			= <<[^a-zA-Z0-9]>> 

%productions%
Document = Preamble Body;

// Preamble
Preamble = DocumentclassDeclaration PackageDeclaration*;
DocumentclassDeclaration = DOCUMENTCLASS DocumentOptions? DocumentClassType;

DocumentClassType = L_CURLY_BRACKET Classname R_CURLY_BRACKET ;
Classname = DOC_CLASS_ARTICLE | DOC_CLASS_IEEE | DOC_CLASS_PROC | DOC_CLASS_MINIMAL | DOC_CLASS_REPORT | DOC_CLASS_BOOK | DOC_CLASS_SLIDES | DOC_CLASS_MEMOIR | DOC_CLASS_LETTER | DOC_CLASS_BEAMER ;

DocumentOptions = L_BRACKET DocumentOption (COMMA DocumentOption)* R_BRACKET;
DocumentOption = DocumentFontsize | DocumentPapersize | DOC_OPT_FLEQN | DOC_OPT_LEQNO | DOC_OPT_DRAFT | DocumentColumns | DocumentStartPage | DocumentOutputSide | DOC_OPT_LANDSCAPE | DocumentOpen ;

DocumentFontsize = DOC_OPT_FONT_10 | DOC_OPT_FONT_11 | DOC_OPT_FONT_12 ;
DocumentPapersize = DOC_OPT_PAPER_LETTER | DOC_OPT_PAPER_A4 | DOC_OPT_PAPER_A5 | DOC_OPT_PAPER_B5 | DOC_OPT_PAPER_EXECUTIVE | DOC_OPT_PAPER_LEGAL ;
DocumentColumns = DOC_OPT_COLUMN_ONE | DOC_OPT_COLUMN_TWO ;
DocumentStartPage = DOC_OPT_PAGE_TITLE | DOC_OPT_PAGE_NOTITLE ;
DocumentOutputSide = DOC_OPT_SIDE_ONE | DOC_OPT_SIDE_TWO ;
DocumentOpen = DOC_OPT_OPEN_ANY | DOC_OPT_OPEN_RIGHT ;

// Package
PackageDeclaration = USEPACKAGE PackageOptions? PackageName;
PackageOptions = L_BRACKET PackageParameter (COMMA PackageParameter)* R_BRACKET;	  // mo¿liwoœæ dodania parametrów np. margin=2cm 
PackageName = L_CURLY_BRACKET Word (COMMA Word)* R_CURLY_BRACKET;

PackageParameter = Word (EQUAL WordNumeric)?;

Word = IDENT (IDENT | DIGIT)* ;
Number = DIGIT+ [DOT DIGIT+] ;
SpecialChar = TILDE | BACKTICK | EXCLAMATION | AT | CARET | ASTERISK | MINUS | PLUS | EQUAL | VERT_BAR | COLON | AMPERSAND | SEMICOLON | APOSTROPHE | QUOTATION | COMMA | DOT | SLASH | QUESTION | L_PARENTHESIS | R_PARENTHESIS | LT | GT ;

WordNumeric = Word | Numeric ;
Numeric = Number IDENT ;

/* Naming conventions in LaTeX - must start with letter or punctuation sign followed by almost everything (letter, punctuation sign or digit) */
Name = (IDENT | SpecialChar) (IDENT | DIGIT | SpecialChar)* ;

Text = (Word | Number | SpecialChar)+ ;


// Commands
Command = BACKSLASH Name CommandParameters? ;
CommandParameters = CommandOptionalParameter* CommandRequiredParameter (CommandRequiredParameter | CommandOptionalParameter)* ;
CommandOptionalParameter = L_BRACKET Name L_BRACKET ;
CommandRequiredParameter = L_CURLY_BRACKET CommandContent* R_CURLY_BRACKET ;
CommandContent = Text | Command | AllowedTokens ;

SpecialCommand = S_DOLLAR | S_PERCENT | S_UNDERSCORE | S_LBRACE | S_RBRACE | S_AMPERSAND | S_HASH | S_BACKSLASH	| S_BACKSLASH_A;

// Environments
Environment = BEGIN_ENV EnvironmentRequiredParameter EnvironmentOptionalParameter? EnvironmentRequiredParameter* Content+ END_ENV EnvironmentRequiredParameter ;
EnvironmentOptionalParameter = L_BRACKET Name R_BRACKET ;
EnvironmentRequiredParameter = L_CURLY_BRACKET Name R_CURLY_BRACKET ;

Body = BEGIN_DOCUMENT Content* END_DOCUMENT;
Content = Command | Environment | Text | AllowedTokens | Math;

/* This production allows writing keywords which exist as tokens in this grammar. It is necessary to write words like "article" or "landscape" in a document without theirs token meaning. */
AllowedTokens = SpecialCommand | Classname | DocumentOption | Greek;

Math = MathInline | MathDisplay | (EQUATION_A_BEGIN | EQUATION_BEGIN) (S_BACKSLASH | Statement)* EQUATION_END ;
MathInline = MATH_BEGIN Statement* MATH_END | S_LPARENTHESIS Statement* S_RPARENTHESIS | DOLLAR Statement* DOLLAR ;
MathDisplay = DISPLAYMATH_BEGIN (S_BACKSLASH | Statement)* DISPLAYMATH_END | S_LBRACKET (S_BACKSLASH | Statement)* S_RBRACKET | DOLLAR DOLLAR (S_BACKSLASH | Statement)* DOLLAR DOLLAR ;


/*
TODO:
- parametr opcjonalny documentclass (english??)
- caret do escape?
- jak znajdzie komendê np. /sec przy /section to przerywa
*/




Statement = Expression {Relation Expression} ;
Relation = EQUAL | NEQUAL | NEQUAL2| LT | GT | LET | GET | IN | NI | PREC | SUCC | PRECEQ | SUCCEQ | LL | GG | SUBSET | SUPSET | SUBSETEQ | SUPSETEQ | EQUIV | SIM | SIMEQ | NOTIN | NSUPSETEQ | NSUBSETEQ | COLON ;
Expression = PlusOrMinus? Component {PlusOrMinus Component};
PlusOrMinus = PLUS | MINUS | PM | MP ;
Component = [UnaryOperatorLeft] FactorExt [UnaryOperator] {[BinaryOperator][UnaryOperatorLeft] FactorExt [UnaryOperator]} ;
FactorExt = Construction | Factor [Subscript][Superscript] ;
BinaryOperator = SLASH | ASTERISK | TO | GETS | BMOD | TIMES | AST | DIV | LEFTARROW | RIGHTARROW | COMMA ;
UnaryOperator = EXCLAMATION | APOSTROPHE | PRIME ;
UnaryOperatorLeft = FORALL | EXISTS | NEXISTS ;

/*
Factors features:
- When one factor follows another (implicit multiply), entity &InvisibleTimes; is placed between them (with few exceptions stated below)
- All factors are treated as identifier ( wrapped with <mi></mi> ) unless stated otherwise
- SpecialSymbol - treated as identifier ( wrapped with <mi></mi> )
- Greek 		- treated as identifier ( wrapped with <mi></mi> )
- Function 		- treated as operator ( wrapped with <mo></mo> ), entity &ApplyFunction; is placed after factor instead of &InvisibleTimes;
- OperatorIdent - treated as operator ( wrapped with <mo></mo> ), NO entity is placed after factor
*/

Factor = IDENT | Number | L_PARENTHESIS Expression R_PARENTHESIS | L_BRACKET Expression R_BRACKET | L_CEIL Expression R_CEIL | L_FLOOR Expression R_FLOOR | L_ANGLE Expression R_ANGLE | S_LBRACE Expression S_RBRACE | L_CURLY_BRACKET Expression R_CURLY_BRACKET | SpecialSymbol | Greek | Function | OperatorIdent ;

SpecialSymbol = LDOTS | CDOTS | INFTY | EMPTYSET | VARNOTHING ;
Greek =  ALPHA | BETA | GAMMA | DELTA | EPSILON | VAREPSILON | ZETA | ETA | THETA | VARTHETA | KAPPA | LAMBDA | MU | NU | XI | PI | VARPI | RHO | VARRHO | SIGMA | VARSIGMA | TAU | UPSILON | PHI | VARPHI | CHI | PSI | OMEGA | BGAMMA | BDELTA | BTHETA | BLAMBDA | BXI | BPI | BSIGMA | BUPSILON | BPHI | BPSI | BOMEGA ;
Function = LoglikeSymbol | RE | IM ;
LoglikeSymbol = ARCCOS | ARCSIN | ARCTAN | ARCCOT | COS | COSH | COT | COTH | CSC | INF | LG | LN | LOG | SEC | SIN | SINH | TAN | TANH | ARG | EXP | LIM | SUP ;
OperatorIdent = INTEGRAL | SUM | PROD | OINTEGRAL | PARTIAL ;
FormattingFunction = MATHRM Parameter ;

Construction = FRAC Parameter Parameter | SQRT [L_BRACKET Expression R_BRACKET] Parameter | FormattingFunction  ;
Parameter = IDENT | DIGIT | SpecialSymbol | Function | OperatorIdent | Greek | L_CURLY_BRACKET Statement* R_CURLY_BRACKET ;
Subscript = UNDERSCORE Parameter ;
Superscript = CARET Parameter ;