%header%
GRAMMARTYPE = "LL"
AUTHOR 		= "Maciej"
VERSION 	= "1.0"

%tokens%
IDENT			= <<[a-zA-Z]>>
DIGIT			= <<[0-9]>>
WHITESPACE		= <<[ \t\n\r]+>> %ignore%
ANY 			= <<.+>>

DOLLAR			= "$"

PLUS			= "+"
MINUS			= "-"
SLASH			= "/"
ASTERISK		= "*"
NEQUAL			= "!="
NEQUAL2			= "\neq"
EQUAL			= "="
EXCLAMATION		= "!"
LT				= "<"
LET				= "<="
LET2			= "\leq"
GT				= ">"
GET				= ">="
GET2			= "\geq"
BAR_SYM			= "|"
APOSTROPHE		= "'" // pochodna
UNDERSCORE		= "_" // indeks dolny
CARET			= "^" // indeks górny (potêga)
COMMA			= ","
COLON			= ":"
DOT				= "."
BACKSLASH		= "\"

L_PARENTHESIS	= "("
R_PARENTHESIS	= ")"
L_BRACKET		= "["
R_BRACKET		= "]"
L_CURLY_BRACKET = "{"
R_CURLY_BRACKET	= "}"

TO				= "\to"
MATHRM			= "\mathrm"
INFTY			= "\infty"
FRAC			= "\frac"
SQRT			= "\sqrt"
SUM				= "\sum"
INTEGRAL		= "\int"
PM				= "\pm"
MP				= "\mp"
BMOD			= "\bmod"
LDOTS			= "\ldots"

// Greckie litery
ALPHA			= "\alpha"
BETA			= "\beta"
GAMMA			= "\gamma"
DELTA 			= "\delta"
EPSILON 		= "\epsilon"
VAREPSILON 		= "\varepsilon"
ZETA 			= "\zeta"
ETA 			= "\eta"
THETA 			= "\theta"
VARTHETA 		= "\vartheta"
KAPPA 			= "\kappa"
LAMBDA 			= "\lambda"
MU 				= "\mu"
NU 				= "\nu"
XI 				= "\xi"
PI 				= "\pi"
VARPI 			= "\varpi"
RHO 			= "\rho"
VARRHO 			= "\varrho"
SIGMA 			= "\sigma"
VARSIGMA 		= "\varsigma"
TAU 			= "\tau"
UPSILON 		= "\upsilon"
PHI 			= "\phi"
VARPHI 			= "\varphi"
CHI 			= "\chi"
PSI 			= "\psi"
OMEGA			= "\omega"

BGAMMA			= "\Gamma"
BDELTA			= "\Delta"
BTHETA			= "\Theta"
BLAMBDA			= "\Lambda"
BXI				= "\Xi"
BPI				= "\Pi"
BSIGMA			= "\Sigma"
BUPSILON		= "\Upsilon"
BPHI			= "\Phi"
BPSI			= "\Psi"
BOMEGA			= "\Omega"

// Log-like symbols
ARCCOS 			= "\arccos"
ARCSIN 			= "\arcsin"
ARCTAN 			= "\arctan"
ARCCOT			= "\arccot"
ARG 			= "\arg"
COS 			= "\cos"
COSH 			= "\cosh"
COT 			= "\cot"
COTH 			= "\coth"
CSC 			= "\csc"
EXP 			= "\exp"
LG 				= "\lg"
LIM 			= "\lim"
LN 				= "\ln"
LOG 			= "\log"
SEC 			= "\sec"
SIN 			= "\sin"
SINH 			= "\sinh"
SUP 			= "\sup"
TAN 			= "\tan"
TANH			= "\tanh"

DOCUMENTCLASS 	= "\documentclass"
USEPACKAGE 		= "\usepackage"
BEGIN_COMMAND	= "\"
BEGIN_ENV		= "\begin"
END_ENV			= "\end"
BEGIN_DOCUMENT	= "\begin{document}"
END_DOCUMENT	= "\end{document}"

// Preambu³a tokeny
DOC_OPT_FLEQN 			= "fleqn"
DOC_OPT_LEQNO 			= "leqno"
DOC_OPT_DRAFT 			= "draft"
DOC_OPT_LANDSCAPE 		= "landscape"
DOC_OPT_FONT_10			= "10pt"
DOC_OPT_FONT_11			= "11pt"
DOC_OPT_FONT_12			= "12pt"
DOC_OPT_PAPER_LETTER 	= "letterpaper"
DOC_OPT_PAPER_A4		= "a4paper"
DOC_OPT_PAPER_A5		= "a5paper"
DOC_OPT_PAPER_B5		= "b5paper"
DOC_OPT_PAPER_EXECUTIVE	= "executivepaper"
DOC_OPT_PAPER_LEGAL		= "legalpaper"
DOC_OPT_COLUMN_ONE		= "onecolumn"
DOC_OPT_COLUMN_TWO		= "twocolumn"
DOC_OPT_PAGE_TITLE		= "titlepage"
DOC_OPT_PAGE_NOTITLE	= "notitlepage"
DOC_OPT_SIDE_ONE		= "oneside"
DOC_OPT_SIDE_TWO		= "twoside"
DOC_OPT_OPEN_ANY		= "openright"
DOC_OPT_OPEN_RIGHT		= "openright"
DOC_CLASS_ARTICLE		= "article"
DOC_CLASS_IEEE			= "IEEEtran"
DOC_CLASS_PROC			= "proc"
DOC_CLASS_MINIMAL		= "minimal"
DOC_CLASS_REPORT		= "report"
DOC_CLASS_BOOK			= "book"
DOC_CLASS_SLIDES		= "slides"
DOC_CLASS_MEMOIR		= "memoir"
DOC_CLASS_LETTER		= "letter"
DOC_CLASS_BEAMER		= "beamer"

%productions%
Document = Preamble Body;

// Preambu³a dokumentu
Preamble = DocumentclassDeclaration PackageDeclaration*;
DocumentclassDeclaration = DOCUMENTCLASS DocumentOptions? DocumentClassType;

DocumentClassType = L_CURLY_BRACKET Classname R_CURLY_BRACKET ;
Classname = DOC_CLASS_ARTICLE | DOC_CLASS_IEEE | DOC_CLASS_PROC | DOC_CLASS_MINIMAL | DOC_CLASS_REPORT | DOC_CLASS_BOOK | DOC_CLASS_SLIDES | DOC_CLASS_MEMOIR | DOC_CLASS_LETTER | DOC_CLASS_BEAMER ;

DocumentOptions = L_BRACKET DocumentOption (COMMA DocumentOption)* R_BRACKET;
DocumentOption = DocumentFontsize | DocumentPapersize | DOC_OPT_FLEQN | DOC_OPT_LEQNO | DOC_OPT_DRAFT | DocumentColumns | DocumentStartPage | DocumentOutputSide | DOC_OPT_LANDSCAPE | DocumentOpen ;

DocumentFontsize = DOC_OPT_FONT_10 | DOC_OPT_FONT_11 | DOC_OPT_FONT_12 ;
DocumentPapersize = DOC_OPT_PAPER_LETTER | DOC_OPT_PAPER_A4 | DOC_OPT_PAPER_A5 | DOC_OPT_PAPER_B5 | DOC_OPT_PAPER_EXECUTIVE | DOC_OPT_PAPER_LEGAL ;
DocumentColumns = DOC_OPT_COLUMN_ONE | DOC_OPT_COLUMN_TWO ;
DocumentStartPage = DOC_OPT_PAGE_TITLE | DOC_OPT_PAGE_NOTITLE ;
DocumentOutputSide = DOC_OPT_SIDE_ONE | DOC_OPT_SIDE_TWO ;
DocumentOpen = DOC_OPT_OPEN_ANY | DOC_OPT_OPEN_RIGHT ;

// Package
PackageDeclaration = USEPACKAGE PackageOptions? PackageName;
PackageOptions = L_BRACKET WordEQ (COMMA WordEQ)* R_BRACKET;	  // mo¿liwoœæ dodania parametrów np. margin=2cm 
PackageName = L_CURLY_BRACKET Word (COMMA Word)* R_CURLY_BRACKET; // tylko litery w nazwach pakietów

WordEQ = Word (EQUAL WordOrNumeric)?;
Word = IDENT+ ;
Numeric = Number WordDigit? ;
Number = DIGIT+ [DOT DIGIT+] ;
WordOrNumeric = Numeric | Word ;
WordDigit = IDENT (IDENT | DIGIT)*;

// Polecenia
Command = BEGIN_COMMAND Word ASTERISK? CommandParameters? ;
CommandParameters = CommandOptionalParameter* CommandRequiredParameter (CommandRequiredParameter | CommandOptionalParameter)* ;
CommandOptionalParameter = L_BRACKET WordDigit (COMMA WordDigit)* L_BRACKET ;
CommandRequiredParameter = L_CURLY_BRACKET WordDigit (COMMA WordDigit)* R_CURLY_BRACKET ;

// Œrodowisko
Environment = BEGIN_ENV EnvironmentRequiredParameter EnvironmentOptionalParameter? Text+ END_ENV EnvironmentRequiredParameter ;
EnvironmentOptionalParameter = L_BRACKET Word L_BRACKET ;
EnvironmentRequiredParameter = L_CURLY_BRACKET Word ASTERISK? R_CURLY_BRACKET ;

Body = BEGIN_DOCUMENT Text+ END_DOCUMENT;

Text = Command | Environment | Math | Word ;

Math = DOLLAR Statement* DOLLAR ;

Statement = Expression {Operator Expression} ;
Operator = EQUAL | NEQUAL | NEQUAL2| LT | GT | LET | LET2 | GET | GET2 ;
Expression = Plus_or_minus? Component {Plus_or_minus Component};
Plus_or_minus = PLUS | MINUS | PM | MP ;
Component = Factor_ext [Unary_Operator] {[Binary_Operator] Factor_ext [Unary_Operator]} ;
Factor_ext = Function | Factor [Subscript][Superscript] ;
Binary_Operator = SLASH | ASTERISK | TO | BMOD | COMMA ;
Unary_Operator = EXCLAMATION | APOSTROPHE ;

Factor = IDENT | Number | L_PARENTHESIS Expression R_PARENTHESIS | L_BRACKET Expression R_BRACKET | Special_symbol ;

Special_symbol = LDOTS | INFTY | Greek ;
Greek =  ALPHA | BETA | GAMMA | DELTA | EPSILON | VAREPSILON | ZETA | ETA | THETA | VARTHETA | KAPPA | LAMBDA | MU | NU | XI | PI | VARPI | RHO | VARRHO | SIGMA | VARSIGMA | TAU | UPSILON | PHI | VARPHI | CHI | PSI | OMEGA | BGAMMA | BDELTA | BTHETA | BLAMBDA | BXI | BPI | BSIGMA | BUPSILON | BPHI | BPSI | BOMEGA ;

Function = FRAC Parameter Parameter | SQRT [L_BRACKET Expression R_BRACKET] Parameter | EXP Expression | Sum_expression | Int_expression | Log_expression | Trig_expression | Lim_expression ;

Log_expression = Log_symbol [Subscript][Superscript] Expression | LN [Superscript] Expression ;
Trig_expression = Trig_symbol [Subscript][Superscript] Component ;
Lim_expression = Lim_symbol [Subscript] Expression ;

Log_symbol = LOG | LG ;
Trig_symbol = SIN | COS | TAN | COT | ARCSIN | ARCCOS | ARCTAN | ARCCOT | SINH | COSH | TANH | COTH | SEC | CSC ;
Lim_symbol = LIM ;

Sum_expression = SUM [Stmt_subscript][Superscript] Expression ;
Int_expression = INTEGRAL [Subscript][Superscript] Expression BACKSLASH COMMA MATHRM L_CURLY_BRACKET IDENT R_CURLY_BRACKET IDENT ;

Parameter = IDENT | DIGIT | Special_symbol | L_CURLY_BRACKET Expression R_CURLY_BRACKET ;
Subscript = UNDERSCORE Parameter ;
Superscript = CARET Parameter ;

Stmt_parameter = IDENT | DIGIT | Special_symbol | L_CURLY_BRACKET Statement R_CURLY_BRACKET ;
Stmt_subscript = UNDERSCORE Stmt_parameter ;
Stmt_superscript = CARET Stmt_parameter ;